allocation_decision_category = {
	deploy_geck = {
		icon = generic_construction
		available = {
			#check_variable = { geck_count  > 0 }
			if = {
				limit = { is_ai = no }
				custom_trigger_tooltip = {
					tooltip = GECK_HAS_SELECTED_STATE
					has_variable = geck_target_state
				}
			}
		}
		#visible = {
		#	check_variable = { geck_count  > 0 }
		#}
		#custom_cost_text = one_geck_cost_text
		#custom_cost_trigger = {
		#	check_variable = { geck_count > 0 }
		#}
		#days_remove = 90
		#ai_will_do = {
		#	factor = 1
		#}
		complete_effect = {
			if = {
				limit = { has_global_flag = debug_logs }
				log = "[GetDateText]: [Root.GetName] allocate (decision) complete entered"
			}
			#set_variable = { geck_in_use = 1 }
			#subtract_from_variable = {
			#	var = geck_count
			#	value = 1
			#}
			LLW = {
				give_resource_rights = { 
					receiver = ERB 
					state = var:geck_target_state 
				}
			}
			if = {
				limit = { has_global_flag = debug_logs }
				log = "[GetDateText]: [Root.GetName] allocate (decision) complete exited"
			}
		}
		highlight_states = {
			state = OWNER.geck_target_state
		}
		#remove_effect = {
		#	if = {
		#		limit = { has_global_flag = debug_logs }
		#		log = "[GetDateText]: [Root.GetName] deploy_geck (decision) remove entered"
		#	}
		#	hidden_effect = {
		#		if = {
		#			limit = {
		#				OR = {
		#					is_ai = yes
		#					NOT = { has_variable = geck_target_state }
		#				}
		#			}
		#			random_owned_state = {
		#				ROOT = {
		#					set_variable = { geck_target_state = PREV }
		#				}
		#			}
		#		}
		#	}
		#	if = {
		#		limit = {
		#			NOT = { has_variable = geck_target_state }
		#		}
		#		custom_effect_tooltip = GECK_STATE_GETS_EFFECTS
		#	}
		#	else = {
		#		if = {
		#			limit = {
		#				ROOT = {
		#					check_variable = { malfunctioning_geck_count > 0 }
		#				}
		#			}
		#			custom_effect_tooltip = malfunctioning_geck_tt
		#			random_list = {
		#				25 = {
		#					add_stability = -0.05
		#				}
		#				25 = {
		#					add_stability = -0.1
		#				}
		#				25 = {
		#					add_stability = -0.15
		#				}
		#				25 = {
		#					custom_effect_tooltip = no_errors_tt
		#				}
		#			}
		#			add_to_variable = { malfunctioning_geck_count = -1 }
		#		}
		#		add_tech_bonus = {
		#			bonus = 0.5
		#			uses = 1
		#			category = construction_category
		#		}
		#		add_tech_bonus = {
		#			bonus = 0.5
		#			uses = 1
		#			category = agriculture_tech
		#		}
		#		var:geck_target_state = {
		#			if = {
		#				limit = {
		#					OR = {
		#						has_state_category = enclave
		#						has_state_category = tiny_island
		#						has_state_category = wasteland
		#					}
		#				}
		#				add_extra_state_shared_building_slots = 8
		#			}
		#			else_if = {
		#				limit = {
		#					OR = {
		#						has_state_category = pastoral
		#						has_state_category = rural
		#						has_state_category = small_island
		#					}
		#				}
		#				add_extra_state_shared_building_slots = 7
		#			}
		#			else_if = {
		#				limit = { has_state_category = shanty }
		#				add_extra_state_shared_building_slots = 6
		#			}
		#			add_building_construction = {
		#				type = industrial_complex
		#				level = 2
		#				instant_build = yes
		#			}
		#			add_building_construction = {
		#				type = infrastructure
		#				level = 3
		#				instant_build = yes
		#			}
		#			add_resource = {
		#				type = energy
		#				amount = 8
		#			}
		#			add_resource = {
		#				type = water
		#				amount = 8
		#			}
		#		}
		#	}
		#	clear_variable = geck_in_use
		#	clear_variable = geck_target_state
		#	if = {
		#		limit = { has_global_flag = debug_logs }
		#		log = "[GetDateText]: [Root.GetName] deploy_geck (decision) remove exited"
		#	}
		#}
	}
}

# vim: set ft=pdx ts=2 sw=2 tw=79 :
